<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
  <changeSet id="202208251614-1" author="khowell" dbms="postgresql" runOnChange="true">
    <comment>Create function to mirror from instance_measurements to hosts.</comment>
    <createProcedure>
      create or replace function sync_host_measurements() returns trigger as
      $$
      begin
        if (new.uom = 'CORES') then
          update hosts
          set cores=new.value
          where id = new.instance_id
            and cores is null
             or cores != new.value;
        elsif (new.uom = 'SOCKETS') then
          update hosts
          set sockets=new.value
          where id = new.instance_id
            and sockets is null
             or sockets != new.value;
        end if;
        return new;
      end;
      $$ language plpgsql;
    </createProcedure>
    <rollback>
      <sql>
        drop function sync_host_measurements();
      </sql>
    </rollback>
  </changeSet>
  <changeSet id="202208251614-2" author="khowell" dbms="postgresql" runOnChange="true">
    <comment>Create triggers to mirror from instance_measurements to hosts.</comment>
    <sql>
      drop trigger if exists sync_host_measurements_insert on instance_measurements;
      drop trigger if exists sync_host_measurements_update on instance_measurements;
      create trigger sync_host_measurements_insert
        after insert
        on instance_measurements
        for each row
        when (pg_trigger_depth() = 0)
      execute procedure sync_host_measurements();
      create trigger sync_host_measurements_update
        after update
        on instance_measurements
        for each row
        when (pg_trigger_depth() = 0)
      execute procedure sync_host_measurements();
    </sql>
    <rollback>
      <sql>
        drop trigger sync_host_measurements_insert on instance_measurements;
        drop trigger sync_host_measurements_update on instance_measurements;
      </sql>
    </rollback>
  </changeSet>
  <changeSet id="202208251614-3" author="khowell" dbms="postgresql" runOnChange="true">
    <comment>Create function to mirror from  hosts measurements to instance_measurements.</comment>
    <createProcedure>
      create or replace function sync_instance_measurements() returns trigger as
      $$
      begin
        if (new.cores is not null) then
          insert into instance_measurements(instance_id, uom, value)
          values (new.id, 'CORES', new.cores)
          on conflict(instance_id, uom) do update set value=new.cores
          where instance_measurements.value != new.cores;
        end if;
        if (new.sockets is not null) then
          insert into instance_measurements(instance_id, uom, value)
          values (new.id, 'SOCKETS', new.sockets)
          on conflict(instance_id, uom) do update set value=new.sockets
          where instance_measurements.value != new.sockets;
        end if;
        return new;
      end;
      $$ language plpgsql;
    </createProcedure>
    <rollback>
      <sql>
        drop function sync_instance_measurements();
      </sql>
    </rollback>
  </changeSet>
  <changeSet id="202208251614-4" author="khowell" dbms="postgresql" runOnChange="true">
    <comment>Create triggers to mirror from  hosts measurements to instance_measurements.</comment>
    <sql>
      drop trigger if exists sync_instance_measurements_insert on hosts;
      drop trigger if exists sync_instance_measurements_update on hosts;
      create trigger sync_instance_measurements_insert
        after insert
        on hosts
        for each row
        when (pg_trigger_depth() = 0)
      execute procedure sync_instance_measurements();
      create trigger sync_instance_measurements_update
        after update
        on hosts
        for each row
        when (pg_trigger_depth() = 0)
      execute procedure sync_instance_measurements();
    </sql>
    <rollback>
      drop trigger sync_instance_measurements_insert on hosts;
      drop trigger sync_instance_measurements_update on hosts;
    </rollback>
  </changeSet>
  <changeSet id="202208251614-5" author="khowell" dbms="postgresql" runOnChange="true">
    <comment>Create function to mirror from tally_measurements to hardware_measurements.</comment>
    <createProcedure>
      create or replace function sync_hardware_measurements() returns trigger as
      $$
      begin
        if (new.uom = 'CORES') then
          insert into hardware_measurements(snapshot_id, measurement_type, cores)
          values (new.snapshot_id, new.measurement_type, new.value)
          on conflict (snapshot_id, measurement_type) do update set cores=new.value
          where hardware_measurements.cores is null
             or hardware_measurements.cores != new.value;
        elsif (new.uom = 'SOCKETS') then
          insert into hardware_measurements(snapshot_id, measurement_type, sockets)
          values (new.snapshot_id, new.measurement_type, new.value)
          on conflict (snapshot_id, measurement_type) do update set sockets=new.value
          where hardware_measurements.sockets is null
             or hardware_measurements.sockets != new.value;
        elsif (new.uom = 'INSTANCES') then
          insert into hardware_measurements(snapshot_id, measurement_type, instance_count)
          values (new.snapshot_id, new.measurement_type, new.value)
          on conflict (snapshot_id, measurement_type) do update set instance_count=new.value
          where hardware_measurements.instance_count is null
             or hardware_measurements.instance_count != new.value;
        end if;
        return new;
      end;
      $$ language plpgsql;
    </createProcedure>
    <rollback>
      <sql>
        drop function sync_hardware_measurements();
      </sql>
    </rollback>
  </changeSet>
  <changeSet id="202208251614-6" author="khowell" dbms="postgresql" runOnChange="true">
    <comment>Create triggers to mirror from tally_measurements to hardware_measurements.</comment>
    <sql>
      drop trigger if exists sync_hardware_measurements_insert on tally_measurements;
      drop trigger if exists sync_hardware_measurements_update on tally_measurements;
      create trigger sync_hardware_measurements_insert
        after insert
        on tally_measurements
        for each row
        when (pg_trigger_depth() = 0)
      execute procedure sync_hardware_measurements();
      create trigger sync_hardware_measurements_update
        after update
        on tally_measurements
        for each row
        when (pg_trigger_depth() = 0)
      execute procedure sync_hardware_measurements();
    </sql>
    <rollback>
      drop trigger sync_hardware_measurements_insert on tally_measurements;
      drop trigger sync_hardware_measurements_update on tally_measurements;
    </rollback>
  </changeSet>
  <changeSet id="202208251614-7" author="khowell" dbms="postgresql" runOnChange="true">
    <comment>Create function to mirror from hardware_measurements to tally_measurements.</comment>
    <createProcedure>
      create or replace function sync_tally_measurements() returns trigger as
      $$
      begin
        if (new.cores is not null) then
          insert into tally_measurements(snapshot_id, measurement_type, uom, value)
          values (new.snapshot_id, new.measurement_type, 'CORES', new.cores)
          on conflict (snapshot_id, measurement_type, uom) do update set value=new.cores
          where tally_measurements.value != new.cores;
        end if;
        if (new.sockets is not null) then
          insert into tally_measurements(snapshot_id, measurement_type, uom, value)
          values (new.snapshot_id, new.measurement_type, 'SOCKETS', new.sockets)
          on conflict (snapshot_id, measurement_type, uom) do update set value=new.sockets
          where tally_measurements.value != new.sockets;
        end if;
        if (new.instance_count is not null) then
          insert into tally_measurements(snapshot_id, measurement_type, uom, value)
          values (new.snapshot_id, new.measurement_type, 'INSTANCES', new.instance_count)
          on conflict (snapshot_id, measurement_type, uom) do update set value=new.instance_count
          where tally_measurements.value != new.instance_count;
        end if;
        return new;
      end;
      $$ language plpgsql;
    </createProcedure>
    <rollback>
      <sql>
        drop function sync_tally_measurements();
      </sql>
    </rollback>
  </changeSet>
  <changeSet id="202208251614-8" author="khowell" dbms="postgresql" runOnChange="true">
    <comment>Create triggers to mirror from hardware_measurements to tally_measurements.</comment>
    <sql>
      drop trigger if exists sync_tally_measurements_insert on hardware_measurements;
      drop trigger if exists sync_tally_measurements_update on hardware_measurements;
      create trigger sync_tally_measurements_insert
        after insert
        on hardware_measurements
        for each row
        when (pg_trigger_depth() = 0)
      execute procedure sync_tally_measurements();
      create trigger sync_tally_measurements_update
        after update
        on hardware_measurements
        for each row
        when (pg_trigger_depth() = 0)
      execute procedure sync_tally_measurements();
    </sql>
    <rollback>
      drop trigger sync_tally_measurements_insert on hardware_measurements;
      drop trigger sync_tally_measurements_update on hardware_measurements;
    </rollback>
  </changeSet>
</databaseChangeLog>
